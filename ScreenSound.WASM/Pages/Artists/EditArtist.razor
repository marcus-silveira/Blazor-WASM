@page "/artists/edit/{Id:int}"
@inject ArtistClient ArtistClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">
    <MudText Class="mt-8" Typo="Typo.h4">
        @* Update Artist @Artist.Name details *@
        Update Artist *Name* details
    </MudText>

    <MudForm>
        <MudTextField Class="mt-4" T="string" Placeholder="Artist Name"
                      @bind-Value="Name"
                      Variant="Variant.Outlined"
                      Required="true"
                      RequiredError="Field is required."
        />

        <MudTextField Class="mt-4" T="string" Placeholder="Artist Bio"
                      @bind-Value="Bio"
                      Variant="Variant.Outlined"
                      Required="true"
                      RequiredError="Field is required."
        />

        <MudImage Class="mt-4" src="@FileImage" />
        <MudFileUpload T="IBrowserFile" Accept=".jpeg" FilesChanged="UploadFile" >
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.PhotoCamera"
                           for="@context">
                    Profile Picture
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        
        <div class="d-flex justify-end mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Success" Class="mr-2" OnClick="@UpdateArtist">
                Save
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Default" Class="mr-2" Href="/artists">
                Back
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Warning" Class="mr-2" OnClick="DeleteArtist">
                Delete
            </MudButton>
        </div>
    </MudForm>
</MudPaper>

@code
{
    public string? Name { get; set; }
    public string? Bio { get; set; }
    public string? FileImage { get; set; }
    public string ProfilePicture { get; set; }
    
    private ArtistResponse? Artist { get; set; }
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await ArtistClient.GetArtistAsync(Id);
        Artist = response;
        Name = response!.Name;
        Bio = response.Bio;
    }

    private async Task UpdateArtist()
    {
        try
        {
            var request = new ArtistRequestEdit(Id, Name, Bio, ProfilePicture);
            await ArtistClient.UpdateArtistAsync(request);
            Snackbar.Add("Artista atualizado com sucesso!", Severity.Success);
            NavigationManager.NavigateTo("/artists");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task DeleteArtist()
    {
        try
        {
            await ArtistClient.DeleteArtistAsync(Id);
            NavigationManager.NavigateTo("/artists");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    private async Task UploadFile(IBrowserFile file)
    {
        const long maxFileSize = 1024 * 1024 * 10;
        const string format = "image/jpeg";
        
        if (file.Size > maxFileSize || file.ContentType != format)
        {
            Snackbar.Add("Invalid file format or size", Severity.Error);
            return;
        }
        
        var resizedImage = await file.RequestImageFileAsync(format, 300, 300);
        var fileStream = resizedImage.OpenReadStream(maxFileSize);
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);
        
        var imageUpload = Convert.ToBase64String(memoryStream.ToArray());
        FileImage = $"data:{format};base64,{imageUpload}";
        ProfilePicture = imageUpload;
    }
}
