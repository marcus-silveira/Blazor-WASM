@page "/artists/register"
@inject ArtistClient ArtistClient                                
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<h3>
    Register an artist
</h3>

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">
    <MudText Class="mt-8" Typo="Typo.h4">
        Artist registration
    </MudText>
    
    <MudForm>
        <MudTextField Class="mt-4" T="string" Placeholder="Artist Name"
                      @bind-Value="Name"
                      Variant="Variant.Outlined"
                      Required="true"
                      RequiredError="Field is required."
        />
        
        <MudTextField Class="mt-4" T="string" Placeholder="Artist Bio"
                      @bind-Value="Bio"
                      Variant="Variant.Outlined"
                      Required="true"   
                      RequiredError="Field is required."
        />

        <MudImage Class="mt-4" src="@FileImage" />
        <MudFileUpload T="IBrowserFile" Accept=".jpeg" FilesChanged="UploadFile" >
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.PhotoCamera"
                           for="@context">
                    Profile Picture
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>

        <div class="d-flex justify-end mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mr-2" OnClick="RegisterArtist">
                Register
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/artists">
                Back
            </MudButton>
        </div>
        
    </MudForm>
</MudPaper>

@code
{
    private string? Name { get; set; }
    private string? Bio { get; set; }
    private string? FileImage { get; set; }
    private string? ProfilePicture { get; set; }
    
    
    private async Task RegisterArtist()
    {
        try
        {
            var request = new ArtistRequest(Name, Bio, ProfilePicture);
            await ArtistClient.RegisterArtistAsync(request);
            NavigationManager.NavigateTo("/artists");
        }
        catch (Exception e)
        {
            Snackbar.Add("Erro", Severity.Error);
            return;
        }
    }
    
    private async Task UploadFile(IBrowserFile file)
    {
        const long maxFileSize = 1024 * 1024 * 10;
        const string format = "image/jpeg";
        
        if (file.Size > maxFileSize || file.ContentType != format)
        {
            Snackbar.Add("Invalid file format or size", Severity.Error);
            return;
        }
        
        var resizedImage = await file.RequestImageFileAsync(format, 300, 300);
        var fileStream = resizedImage.OpenReadStream(maxFileSize);
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);
        
        var imageUpload = Convert.ToBase64String(memoryStream.ToArray());
        FileImage = $"data:{format};base64,{imageUpload}";
        ProfilePicture = imageUpload;
    }
}
